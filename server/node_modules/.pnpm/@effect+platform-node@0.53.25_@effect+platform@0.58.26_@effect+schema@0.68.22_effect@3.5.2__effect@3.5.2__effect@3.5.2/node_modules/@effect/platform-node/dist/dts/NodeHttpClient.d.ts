/**
 * @since 1.0.0
 */
import type * as Client from "@effect/platform/HttpClient";
import type * as Context from "effect/Context";
import type * as Effect from "effect/Effect";
import type * as FiberRef from "effect/FiberRef";
import type * as Layer from "effect/Layer";
import type * as Scope from "effect/Scope";
import type * as Http from "node:http";
import type * as Https from "node:https";
import type * as Undici from "undici";
/**
 * @since 1.0.0
 * @category agent
 */
export declare const HttpAgentTypeId: unique symbol;
/**
 * @since 1.0.0
 * @category agent
 */
export type HttpAgentTypeId = typeof HttpAgentTypeId;
/**
 * @since 1.0.0
 * @category agent
 */
export interface HttpAgent {
    readonly [HttpAgentTypeId]: typeof HttpAgentTypeId;
    readonly http: Http.Agent;
    readonly https: Https.Agent;
}
/**
 * @since 1.0.0
 * @category agent
 */
export declare const HttpAgent: Context.Tag<HttpAgent, HttpAgent>;
/**
 * @since 1.0.0
 * @category agent
 */
export declare const makeAgent: (options?: Https.AgentOptions) => Effect.Effect<HttpAgent, never, Scope.Scope>;
/**
 * @since 1.0.0
 * @category agent
 */
export declare const agentLayer: Layer.Layer<HttpAgent>;
/**
 * @since 1.0.0
 * @category agent
 */
export declare const makeAgentLayer: (options?: Https.AgentOptions) => Layer.Layer<HttpAgent>;
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const make: Effect.Effect<Client.HttpClient.Default, never, HttpAgent>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layer: Layer.Layer<Client.HttpClient.Default>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layerWithoutAgent: Layer.Layer<Client.HttpClient.Default, never, HttpAgent>;
/**
 * @since 1.0.0
 * @category undici
 */
export interface Dispatcher {
    readonly _: unique symbol;
}
/**
 * @since 1.0.0
 * @category undici
 */
export declare const Dispatcher: Context.Tag<Dispatcher, Undici.Dispatcher>;
/**
 * @since 1.0.0
 * @category undici
 */
export declare const makeDispatcher: Effect.Effect<Undici.Dispatcher, never, Scope.Scope>;
/**
 * @since 1.0.0
 * @category undici
 */
export declare const dispatcherLayer: Layer.Layer<Dispatcher>;
/**
 * @since 1.0.0
 * @category undici
 */
export declare const dispatcherLayerGlobal: Layer.Layer<Dispatcher>;
/**
 * @since 1.0.0
 * @category undici
 */
export declare const currentUndiciOptions: FiberRef.FiberRef<Partial<Undici.Dispatcher.RequestOptions>>;
/**
 * @since 1.0.0
 * @category undici
 */
export declare const withUndiciOptions: {
    (options: Partial<Undici.Dispatcher.RequestOptions>): <R, E, A>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R>;
    <R, E, A>(effect: Effect.Effect<A, E, R>, options: Partial<Undici.Dispatcher.RequestOptions>): Effect.Effect<A, E, R>;
};
/**
 * @since 1.0.0
 * @category constructors
 */
export declare const makeUndici: (dispatcher: Undici.Dispatcher) => Client.HttpClient.Default;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layerUndici: Layer.Layer<Client.HttpClient.Default>;
/**
 * @since 1.0.0
 * @category layers
 */
export declare const layerUndiciWithoutDispatcher: Layer.Layer<Client.HttpClient.Default, never, Dispatcher>;
//# sourceMappingURL=NodeHttpClient.d.ts.map