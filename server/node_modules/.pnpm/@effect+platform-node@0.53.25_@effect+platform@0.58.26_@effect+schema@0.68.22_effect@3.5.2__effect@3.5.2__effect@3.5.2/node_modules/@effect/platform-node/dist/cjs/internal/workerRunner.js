"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layer = void 0;
var _WorkerError = require("@effect/platform/WorkerError");
var Runner = _interopRequireWildcard(require("@effect/platform/WorkerRunner"));
var Cause = _interopRequireWildcard(require("effect/Cause"));
var Effect = _interopRequireWildcard(require("effect/Effect"));
var Layer = _interopRequireWildcard(require("effect/Layer"));
var Queue = _interopRequireWildcard(require("effect/Queue"));
var Schedule = _interopRequireWildcard(require("effect/Schedule"));
var WorkerThreads = _interopRequireWildcard(require("node:worker_threads"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const platformRunnerImpl = /*#__PURE__*/Runner.PlatformRunner.of({
  [Runner.PlatformRunnerTypeId]: Runner.PlatformRunnerTypeId,
  start(shutdown) {
    return Effect.gen(function* (_) {
      if (!WorkerThreads.parentPort) {
        return yield* _(new _WorkerError.WorkerError({
          reason: "spawn",
          error: new Error("not in worker")
        }));
      }
      const port = WorkerThreads.parentPort;
      const queue = yield* _(Queue.unbounded());
      yield* _(Effect.async(resume => {
        port.on("message", message => {
          if (message[0] === 0) {
            queue.unsafeOffer([0, message[1]]);
          } else {
            Effect.runFork(shutdown);
          }
        });
        port.on("messageerror", error => {
          resume(new _WorkerError.WorkerError({
            reason: "decode",
            error
          }));
        });
        port.on("error", error => {
          resume(new _WorkerError.WorkerError({
            reason: "unknown",
            error
          }));
        });
      }), Effect.tapErrorCause(cause => Cause.isInterruptedOnly(cause) ? Effect.void : Effect.logDebug(cause)), Effect.retry(Schedule.forever), Effect.annotateLogs({
        package: "@effect/platform-node",
        module: "WorkerRunner"
      }), Effect.interruptible, Effect.forkScoped);
      const send = (_portId, message, transfers) => Effect.sync(() => port.postMessage([1, message], transfers));
      // ready
      port.postMessage([0]);
      return {
        queue,
        send
      };
    });
  }
});
/** @internal */
const layer = exports.layer = /*#__PURE__*/Layer.succeed(Runner.PlatformRunner, platformRunnerImpl);
//# sourceMappingURL=workerRunner.js.map