"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layerWorker = exports.layerManager = exports.layer = void 0;
var Worker = _interopRequireWildcard(require("@effect/platform/Worker"));
var _WorkerError = require("@effect/platform/WorkerError");
var Effect = _interopRequireWildcard(require("effect/Effect"));
var _Function = require("effect/Function");
var Layer = _interopRequireWildcard(require("effect/Layer"));
var Queue = _interopRequireWildcard(require("effect/Queue"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const platformWorkerImpl = /*#__PURE__*/Worker.PlatformWorker.of({
  [Worker.PlatformWorkerTypeId]: Worker.PlatformWorkerTypeId,
  spawn(worker_) {
    return Effect.gen(function* (_) {
      const worker = worker_;
      yield* _(Effect.addFinalizer(() => (0, _Function.pipe)(Effect.async(resume => {
        worker.once("exit", () => {
          resume(Effect.void);
        });
        worker.postMessage([1]);
      }), Effect.timeout(5000), Effect.orElse(() => Effect.sync(() => worker.terminate())))));
      const queue = yield* _(Queue.unbounded());
      yield* _(Effect.addFinalizer(() => Queue.shutdown(queue)));
      const fiber = yield* _(Effect.async(resume => {
        worker.on("message", message => {
          queue.unsafeOffer(message);
        });
        worker.on("messageerror", error => {
          resume(new _WorkerError.WorkerError({
            reason: "decode",
            error
          }));
        });
        worker.on("error", error => {
          resume(new _WorkerError.WorkerError({
            reason: "unknown",
            error
          }));
        });
        worker.on("exit", code => {
          resume(new _WorkerError.WorkerError({
            reason: "unknown",
            error: new Error(`exited with code ${code}`)
          }));
        });
      }), Effect.interruptible, Effect.forkScoped);
      const send = (message, transfers) => Effect.try({
        try: () => worker.postMessage([0, message], transfers),
        catch: error => new _WorkerError.WorkerError({
          reason: "send",
          error
        })
      });
      return {
        fiber,
        queue,
        send
      };
    });
  }
});
/** @internal */
const layerWorker = exports.layerWorker = /*#__PURE__*/Layer.succeed(Worker.PlatformWorker, platformWorkerImpl);
/** @internal */
const layerManager = exports.layerManager = /*#__PURE__*/Layer.provide(Worker.layerManager, layerWorker);
/** @internal */
const layer = spawn => Layer.merge(layerManager, Worker.layerSpawner(spawn));
exports.layer = layer;
//# sourceMappingURL=worker.js.map