import * as Schema from "@effect/schema/Schema";
import * as Serializable from "@effect/schema/Serializable";
import * as Equal from "effect/Equal";
import * as Hash from "effect/Hash";
import * as PrimaryKey from "effect/PrimaryKey";
import * as Request from "effect/Request";
/** @internal */
export const withRequestTag = f => {
  const cache = new Map();
  return request => {
    let result = cache.get(request._tag);
    if (result !== undefined) {
      return result;
    }
    result = f(request);
    cache.set(request._tag, result);
    return result;
  };
};
/** @internal */
export const StreamRequestTypeId = /*#__PURE__*/Symbol.for("@effect/rpc/Rpc/StreamRequest");
/** @internal */
export const makeRequest = options => {
  const isStream = (StreamRequestTypeId in options.request);
  const hash = Hash.hash(options.request);
  return {
    ...options,
    [Request.RequestTypeId]: undefined,
    [PrimaryKey.symbol]: () => `${options.request._tag}:${hash}`,
    [Serializable.symbolResult]: {
      Success: isStream ? Schema.Never : Serializable.successSchema(options.request),
      Failure: isStream ? Schema.Never : Serializable.failureSchema(options.request)
    },
    [Equal.symbol](that) {
      return Equal.equals(options.request, that.request);
    },
    [Hash.symbol]() {
      return hash;
    }
  };
};
//# sourceMappingURL=rpc.js.map