"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withRequestTag = exports.makeRequest = exports.StreamRequestTypeId = void 0;
var Schema = _interopRequireWildcard(require("@effect/schema/Schema"));
var Serializable = _interopRequireWildcard(require("@effect/schema/Serializable"));
var Equal = _interopRequireWildcard(require("effect/Equal"));
var Hash = _interopRequireWildcard(require("effect/Hash"));
var PrimaryKey = _interopRequireWildcard(require("effect/PrimaryKey"));
var Request = _interopRequireWildcard(require("effect/Request"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/** @internal */
const withRequestTag = f => {
  const cache = new Map();
  return request => {
    let result = cache.get(request._tag);
    if (result !== undefined) {
      return result;
    }
    result = f(request);
    cache.set(request._tag, result);
    return result;
  };
};
/** @internal */
exports.withRequestTag = withRequestTag;
const StreamRequestTypeId = exports.StreamRequestTypeId = /*#__PURE__*/Symbol.for("@effect/rpc/Rpc/StreamRequest");
/** @internal */
const makeRequest = options => {
  const isStream = (StreamRequestTypeId in options.request);
  const hash = Hash.hash(options.request);
  return {
    ...options,
    [Request.RequestTypeId]: undefined,
    [PrimaryKey.symbol]: () => `${options.request._tag}:${hash}`,
    [Serializable.symbolResult]: {
      Success: isStream ? Schema.Never : Serializable.successSchema(options.request),
      Failure: isStream ? Schema.Never : Serializable.failureSchema(options.request)
    },
    [Equal.symbol](that) {
      return Equal.equals(options.request, that.request);
    },
    [Hash.symbol]() {
      return hash;
    }
  };
};
exports.makeRequest = makeRequest;
//# sourceMappingURL=rpc.js.map