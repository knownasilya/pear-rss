import * as Client from "@effect/platform/HttpClient";
import * as Resolver from "@effect/rpc/Resolver";
import type * as Router from "@effect/rpc/Router";
import type * as Rpc from "@effect/rpc/Rpc";
import type * as Serializable from "@effect/schema/Serializable";
import type * as RequestResolver from "effect/RequestResolver";
/**
 * @category constructors
 * @since 1.0.0
 */
export declare const make: <R extends Router.Router<any, any>>(client: Client.HttpClient.Default) => RequestResolver.RequestResolver<Rpc.Request<Router.Router.Request<R>>, Serializable.SerializableWithResult.Context<Router.Router.Request<R>>>;
/**
 * @category constructors
 * @since 1.0.0
 */
export declare const makeClient: <R extends Router.Router<any, any>>(baseUrl: string) => Serializable.SerializableWithResult.Context<Router.Router.Request<R>> extends never ? Resolver.Client<RequestResolver.RequestResolver<Rpc.Request<Router.Router.Request<R>>>> : "HttpResolver.makeClientEffect: request context is not `never`";
//# sourceMappingURL=HttpResolverNoStream.d.ts.map