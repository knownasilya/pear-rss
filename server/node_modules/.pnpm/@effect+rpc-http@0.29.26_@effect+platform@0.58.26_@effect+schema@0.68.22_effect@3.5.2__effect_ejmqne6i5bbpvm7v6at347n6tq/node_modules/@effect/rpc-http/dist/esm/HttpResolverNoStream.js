/**
 * @since 1.0.0
 */
import * as Body from "@effect/platform/HttpBody";
import * as Client from "@effect/platform/HttpClient";
import * as ClientRequest from "@effect/platform/HttpClientRequest";
import * as Resolver from "@effect/rpc/Resolver";
import * as ResolverNoStream from "@effect/rpc/ResolverNoStream";
import * as Effect from "effect/Effect";
import * as Schedule from "effect/Schedule";
/**
 * @category constructors
 * @since 1.0.0
 */
export const make = client => ResolverNoStream.make(requests => client(ClientRequest.post("", {
  body: Body.unsafeJson(requests)
})).pipe(Effect.flatMap(_ => _.json), Effect.scoped))();
/**
 * @category constructors
 * @since 1.0.0
 */
export const makeClient = baseUrl => Resolver.toClient(make(Client.fetchOk.pipe(Client.mapRequest(ClientRequest.prependUrl(baseUrl)), Client.retry(Schedule.exponential(50).pipe(Schedule.intersect(Schedule.recurs(5)))))));
//# sourceMappingURL=HttpResolverNoStream.js.map