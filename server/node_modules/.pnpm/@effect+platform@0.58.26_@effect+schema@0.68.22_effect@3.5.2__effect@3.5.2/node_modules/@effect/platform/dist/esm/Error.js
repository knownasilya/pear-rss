import * as Data from "effect/Data";
import * as Predicate from "effect/Predicate";
import * as internal from "./internal/error.js";
/**
 * @since 1.0.0
 * @category type id
 */
export const PlatformErrorTypeId = internal.PlatformErrorTypeId;
/**
 * @since 1.0.0
 * @category refinements
 */
export const isPlatformError = u => Predicate.hasProperty(u, PlatformErrorTypeId);
/**
 * @since 1.0.0
 * @category error
 */
export const TypeIdError = (typeId, tag) => {
  class Base extends Data.Error {
    _tag = tag;
  }
  ;
  Base.prototype[typeId] = typeId;
  Base.prototype.name = tag;
  return Base;
};
/**
 * @since 1.0.0
 * @category error
 */
export const RefailError = (typeId, tag) => {
  class Base extends Data.Error {
    _tag = tag;
    constructor(props) {
      super(props);
      if (Predicate.hasProperty(this.error, "stack")) {
        ;
        this.stack = this.error.stack;
      }
    }
    get message() {
      return Predicate.hasProperty(this.error, "message") ? this.error.message : Predicate.hasProperty(this.error, "toJSON") && typeof this.error.toJSON === "function" ? JSON.stringify(this.error.toJSON()) : String(this.error);
    }
  }
  ;
  Base.prototype[typeId] = typeId;
  Base.prototype.name = tag;
  return Base;
};
/**
 * @since 1.0.0
 * @category error
 */
export const BadArgument = internal.badArgument;
/**
 * @since 1.0.0
 * @category error
 */
export const SystemError = internal.systemError;
//# sourceMappingURL=Error.js.map