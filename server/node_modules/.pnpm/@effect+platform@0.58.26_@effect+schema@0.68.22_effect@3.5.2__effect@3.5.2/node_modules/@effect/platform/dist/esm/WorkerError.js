/**
 * @since 1.0.0
 */
import * as Schema from "@effect/schema/Schema";
import * as Inspectable from "effect/Inspectable";
import * as Predicate from "effect/Predicate";
import * as internal from "./internal/workerError.js";
/**
 * @since 1.0.0
 * @category type ids
 */
export const WorkerErrorTypeId = internal.WorkerErrorTypeId;
/**
 * @since 1.0.0
 * @category predicates
 */
export const isWorkerError = u => Predicate.hasProperty(u, WorkerErrorTypeId);
/**
 * @since 1.0.0
 * @category errors
 */
export class WorkerError extends Schema.TaggedError()("WorkerError", {
  reason: Schema.Literal("spawn", "decode", "send", "unknown", "encode"),
  error: Schema.CauseDefectUnknown
}) {
  /**
   * @since 1.0.0
   */
  [WorkerErrorTypeId] = WorkerErrorTypeId;
  /**
   * @since 1.0.0
   */
  static Cause = Schema.Cause({
    error: this
  });
  /**
   * @since 1.0.0
   */
  static encodeCause = Schema.encodeSync(this.Cause);
  /**
   * @since 1.0.0
   */
  static decodeCause = Schema.decodeSync(this.Cause);
  /**
   * @since 1.0.0
   */
  get message() {
    const message = Predicate.hasProperty(this.error, "message") ? this.error.message : Inspectable.toStringUnknown(this.error, undefined);
    return `${this.reason}: ${message}`;
  }
}
//# sourceMappingURL=WorkerError.js.map