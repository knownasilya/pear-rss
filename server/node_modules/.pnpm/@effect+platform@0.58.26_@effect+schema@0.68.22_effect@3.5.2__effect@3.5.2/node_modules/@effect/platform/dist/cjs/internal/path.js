"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.layer = exports.TypeId = exports.Path = void 0;
var _Context = require("effect/Context");
var Effect = _interopRequireWildcard(require("effect/Effect"));
var _Function = require("effect/Function");
var Layer = _interopRequireWildcard(require("effect/Layer"));
var _pathBrowserify = _interopRequireDefault(require("path-browserify"));
var _Error = require("../Error.js");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/** @internal */
const TypeId = exports.TypeId = /*#__PURE__*/Symbol.for("@effect/platform/Path");
/** @internal */
const Path = exports.Path = /*#__PURE__*/(0, _Context.GenericTag)("@effect/platform/Path");
/** @internal */
const layer = exports.layer = /*#__PURE__*/Layer.succeed(Path, /*#__PURE__*/Path.of({
  [TypeId]: TypeId,
  ..._pathBrowserify.default,
  fromFileUrl,
  toFileUrl,
  toNamespacedPath: _Function.identity
}));
/**
 * The following functions are adapted from the Node.js source code:
 * https://github.com/nodejs/node/blob/main/lib/internal/url.js
 *
 * The following license applies to these functions:
 * - MIT
 */
function fromFileUrl(url) {
  if (url.protocol !== "file:") {
    return Effect.fail((0, _Error.BadArgument)({
      module: "Path",
      method: "fromFileUrl",
      message: "URL must be of scheme file"
    }));
  } else if (url.hostname !== "") {
    return Effect.fail((0, _Error.BadArgument)({
      module: "Path",
      method: "fromFileUrl",
      message: "Invalid file URL host"
    }));
  }
  const pathname = url.pathname;
  for (let n = 0; n < pathname.length; n++) {
    if (pathname[n] === "%") {
      const third = pathname.codePointAt(n + 2) | 0x20;
      if (pathname[n + 1] === "2" && third === 102) {
        return Effect.fail((0, _Error.BadArgument)({
          module: "Path",
          method: "fromFileUrl",
          message: "must not include encoded / characters"
        }));
      }
    }
  }
  return Effect.succeed(decodeURIComponent(pathname));
}
const CHAR_FORWARD_SLASH = 47;
function toFileUrl(filepath) {
  const outURL = new URL("file://");
  let resolved = _pathBrowserify.default.resolve(filepath);
  // path.resolve strips trailing slashes so we must add them back
  const filePathLast = filepath.charCodeAt(filepath.length - 1);
  if (filePathLast === CHAR_FORWARD_SLASH && resolved[resolved.length - 1] !== "/") {
    resolved += "/";
  }
  outURL.pathname = encodePathChars(resolved);
  return Effect.succeed(outURL);
}
const percentRegEx = /%/g;
const backslashRegEx = /\\/g;
const newlineRegEx = /\n/g;
const carriageReturnRegEx = /\r/g;
const tabRegEx = /\t/g;
function encodePathChars(filepath) {
  if (filepath.includes("%")) {
    filepath = filepath.replace(percentRegEx, "%25");
  }
  if (filepath.includes("\\")) {
    filepath = filepath.replace(backslashRegEx, "%5C");
  }
  if (filepath.includes("\n")) {
    filepath = filepath.replace(newlineRegEx, "%0A");
  }
  if (filepath.includes("\r")) {
    filepath = filepath.replace(carriageReturnRegEx, "%0D");
  }
  if (filepath.includes("\t")) {
    filepath = filepath.replace(tabRegEx, "%09");
  }
  return filepath;
}
//# sourceMappingURL=path.js.map